module uim.cake.collections.iterators.unfolditerator;

@safe:
import uim.cake;


/**
 * An iterator that can be used to generate nested iterators out of a collection
 * of items by applying an function to each of the elements in this iterator.
 *
 * @internal
 * @see uim.cake.collections.Collection::unfold()
 */
class UnfoldIterator : IteratorIterator : RecursiveIterator
{
    /**
     * A function that is passed each element in this iterator and
     * must return an array or Traversable object.
     *
     * @var callable
     */
    protected _unfolder;

    /**
     * A reference to the internal iterator this object is wrapping.
     *
     * @var \Traversable
     */
    protected _innerIterator;

    /**
     * Creates the iterator that will generate child iterators from each of the
     * elements it was constructed with.
     *
     * @param \Traversable myItems The list of values to iterate
     * @param callable $unfolder A callable function that will receive the
     * current item and key. It must return an array or Traversable object
     * out of which the nested iterators will be yielded.
     */
    this(Traversable myItems, callable $unfolder) {
        _unfolder = $unfolder;
        super.this(myItems);
        _innerIterator = this.getInnerIterator();
    }

    /**
     * Returns true as each of the elements in the array represent a
     * list of items
     */
    bool hasChildren() {
        return true;
    }

    /**
     * Returns an iterator containing the items generated by transforming
     * the current value with the callable function.
     *
     * @return \RecursiveIterator
     */
    RecursiveIterator getChildren() {
        $current = this.current();
        myKey = this.key();
        $unfolder = _unfolder;

        return new NoChildrenIterator($unfolder($current, myKey, _innerIterator));
    }
}
